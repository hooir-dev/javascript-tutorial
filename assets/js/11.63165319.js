(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{180:function(t,r,n){"use strict";n.r(r);var a=n(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,r=t.$createElement,n=t._self._c||r;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"选择排序、桶排序、冒泡排序和快速排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择排序、桶排序、冒泡排序和快速排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 选择排序、桶排序、冒泡排序和快速排序")]),t._v(" "),n("h3",{attrs:{id:"选择排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#选择排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 选择排序")]),t._v(" "),n("h4",{attrs:{id:"原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("p",[t._v("选择排序从数组内遍历出最大值，加入新数组，将最大值从原数组中删除，重复上述操作，最后得出的新数组就是一个从大到小排序的数组了。")]),t._v(" "),n("h4",{attrs:{id:"代码实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * params {number[]} list\n * return {number[]}\n */\nfunction sort(list) {\n  list = [...list]; // 最好不要对元素组操作\n  const newList = []; // 创建待返回的空数组\n  while(list.length) { // 当 list.length === 0 时，表示处理完毕\n    let min = Infinity; // 设最小值无穷大 或者 等于 list 中的任意位置都可\n    let minIndex; // 记录下最小值下标\n    list.forEach((el, index) => { // 对 list 循环，查找当前 list 最小值\n      if(el < min) {\n        min = el;\n        minIndex = index;\n      }\n    });\n    newList.push(list[minIndex]); // 将 最小值下标 对应的值 push 进数组\n    list.splice(minIndex, 1); // 从list内删除这个值\n  }\n  return newList\n}\n复制代码\n")])])]),n("h4",{attrs:{id:"优劣"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优劣","aria-hidden":"true"}},[t._v("#")]),t._v(" 优劣")]),t._v(" "),n("p",[t._v("优点：")]),t._v(" "),n("ul",[n("li",[t._v("上手比较简单，比较符合人的正常思路逻辑。")])]),t._v(" "),n("p",[t._v("缺点：")]),t._v(" "),n("ul",[n("li",[t._v("时间复杂度O(n^2)，运算速度很慢，当数组元素个数比较多时，时间增速惊人。")])]),t._v(" "),n("hr"),t._v(" "),n("h3",{attrs:{id:"桶排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#桶排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 桶排序")]),t._v(" "),n("h4",{attrs:{id:"原理-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("p",[t._v("桶排序顾名思义，就是准备好一些“桶”，然后将待排序的数组值一个个放入对应的“桶内”，全部元素放入”桶“后，然后展开”桶“就得到了排序完成的数组了。比如：当前需要排序的数组 [8, 3, 5, 9, 2, 3, 0, 8]，我们可以准备一个长度为10的数组，每一项的值为0，我们对需要排序的数组开始便利，当我们遇到8时，我们将newList[8]内的0，加1，改成1；然后下一个3，我们将newList[3]内的0，加1，改成1...，处理完所有元素后，将newList便利输出就得到了排序好的数组了。当然了这里只是简单的对桶排序的介绍，真正的桶排序肯定比这个复杂。")]),t._v(" "),n("h4",{attrs:{id:"代码实现-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const list = [8, 3, 5, 9, 2, 3, 0, 8]; // 待排序数组\n\n/**\n * params {number[]} list\n * return {number[]}\n */\nfunction sort(list) {\n  const newList = Array.from({length: 10}).fill(0); // 创建 [0, 0, ..., 0] 的数组，长度为10\n  list.forEach(el => newList[el] += 1); // 把数组元素记录在 newList 上\n  return newList.reduce((pre, el, index) => { // 展开数组\n    for(let i = el; i; i--) {\n      pre.push(index)\n    }\n    return pre;\n  }, [])\n}\n复制代码\n")])])]),n("h4",{attrs:{id:"优劣-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优劣-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 优劣")]),t._v(" "),n("p",[t._v("优点：")]),t._v(" "),n("ul",[n("li",[t._v("时间复杂度只有O(m+n)，计算效率高")])]),t._v(" "),n("p",[t._v("缺点：")]),t._v(" "),n("ul",[n("li",[t._v("空间消耗比较大")]),t._v(" "),n("li",[t._v("需要提前知道最大值，最小值")])]),t._v(" "),n("hr"),t._v(" "),n("h3",{attrs:{id:"冒泡排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 冒泡排序")]),t._v(" "),n("h4",{attrs:{id:"原理-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理-3","aria-hidden":"true"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("p",[t._v("冒泡排序我先介绍说它的原理，你就明白它为什么叫冒泡排序了。有一个待排序的数组 [8, 3, 5, 9, 2, 3, 0, 8] ，需要由小到大排序。我们只需要把小的放在左边，大的放右边是不是就完成了排序呢？显然是的。将第一个 8 与 第二位 3 比较，8 大于 3，所以我们把8往右放，即将 8 与 3 更换位置，更换后的数组是 ["),n("strong",[t._v("3")]),t._v(", "),n("strong",[t._v("8")]),t._v(", 5, 9, 2, 3, 0, 8] ，继续比较改变后的数组第二位 8 与 第三位 5 比较，8 大于 5，更换后的数组是 [3, "),n("strong",[t._v("5")]),t._v(", "),n("strong",[t._v("8")]),t._v(", 9, 2, 3, 0, 8]，重复这样的操作，如果遇到相同或者当前数值小于后一位的则不需要改变，继续比较下一位即可。所以看这 8 的移动轨迹，像不像是一个气泡在往上冒，所以这个排序方法就叫冒泡排序。")]),t._v(" "),n("h4",{attrs:{id:"代码实现-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现-3","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("/**\n * params {number[]} list\n * return {number[]}\n */\nfunction sort(list) {\n  list = [...list];\n  let length = list.length;\n  while(length--) {\n    for(let i = 0; i < length; i++) {\n      const current = list[i];\n      const next = list[i + 1];\n      if(current > next) {\n        [list[i], list[i + 1]] = [next, current];\n      }\n    }\n  }\n  return list;\n}\n复制代码\n")])])]),n("h4",{attrs:{id:"优劣-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优劣-3","aria-hidden":"true"}},[t._v("#")]),t._v(" 优劣")]),t._v(" "),n("p",[t._v("优点：")]),t._v(" "),n("ul",[n("li",[t._v("没啥优点吧，我不清楚哈，欢迎赐教。")])]),t._v(" "),n("p",[t._v("缺点：")]),t._v(" "),n("ul",[n("li",[t._v("时间复杂度O(n^2)，计算慢。")])]),t._v(" "),n("hr"),t._v(" "),n("h3",{attrs:{id:"快速排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),n("blockquote",[n("p",[t._v("中心思想是用二分实现的快速排序，能够很快的完成排序任务，也是我比较推荐的一种排序方式。")])]),t._v(" "),n("h4",{attrs:{id:"原理-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原理-4","aria-hidden":"true"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),n("p",[t._v("快速排序的优点就是速度快，为什么速度快呢？我先介绍一下快速排序的原理。选择一个基准值，一般选择数组的一个值，遍历数组，大的放右边，小的放左边，一样大的放中间（哈哈哈哈哈😀），利用递归重复对大的数组和小的数组进行拆分，最后得出排序后的数组。")]),t._v(" "),n("h4",{attrs:{id:"代码实现-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码实现-4","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function quickSort(arr) {\n  if(arr.length < 2) {\n    return arr;\n  } else {\n    const pivot = arr[0]; // 基准值\n    const pivotArr = []; // 一样大的放中间\n    const lowArr= []; // 小的放左边\n    const hightArr = []; // 大的放右边\n    arr.forEach(current => {\n      if(current === pivot) pivotArr.push(current);\n      else if(current > pivot) hightArr.push(current);\n      else lowArr.push(current);\n    })\n    return quickSort(lowArr).concat(pivotArr).concat(quickSort(hightArr));\n  }\n}\n复制代码\n")])])]),n("h4",{attrs:{id:"优劣-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优劣-4","aria-hidden":"true"}},[t._v("#")]),t._v(" 优劣")]),t._v(" "),n("p",[t._v("优点：")]),t._v(" "),n("ul",[n("li",[t._v("速度快，O(n*log n)")])]),t._v(" "),n("p",[t._v("缺点：")]),t._v(" "),n("ul",[n("li")])])}],!1,null,null,null);r.default=e.exports}}]);